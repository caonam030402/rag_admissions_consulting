"use client";

import React, { useState } from "react";
import { v4 as uuidv4 } from "uuid";
import {
  House,
  GraduationCap,
  Calculator,
  MapTrifold,
  Books,
  ChartBar,
  LightbulbFilament,
  Plus,
  X,
  Question,
  Clock,
  User,
  Gear,
} from "@phosphor-icons/react";
import { Button, Divider, Card, CardBody } from "@heroui/react";

import { ActorType } from "@/enums/systemChat";
import { chatService } from "@/services/chat";
import { useChatStore } from "@/stores/chat";
import { formatSurveyData } from "@/utils/common";

import AdmissionPredictor from "../AdmissionPredictor";
import CampusTour from "../CampusTour";
import SurveyForm from "../SurveyForm";

interface NavigationItem {
  icon: React.ReactNode;
  label: string;
  isActive?: boolean;
  action?: string;
  description?: string;
}

// Main Navigation - Core Features
const MainNavigation: NavigationItem[] = [
  {
    icon: <House size={20} weight="fill" />,
    label: "Trang ch·ªß",
    isActive: true,
    description: "M√†n h√¨nh ch√≠nh",
  },
];

// Consultation Tools - C√¥ng c·ª• t∆∞ v·∫•n
const ConsultationTools: NavigationItem[] = [
  {
    icon: <LightbulbFilament size={20} weight="fill" />,
    label: "Kh·∫£o s√°t ch·ªçn ng√†nh",
    action: "survey",
    description: "T√¨m ng√†nh h·ªçc ph√π h·ª£p",
  },
  {
    icon: <Calculator size={20} weight="fill" />,
    label: "D·ª± ƒëo√°n ƒëi·ªÉm",
    action: "predictor",
    description: "D·ª± ƒëo√°n ƒëi·ªÉm thi ƒë·∫°i h·ªçc",
  },
];

// Information & Resources - Th√¥ng tin & T√†i nguy√™n
const InformationResources: NavigationItem[] = [
  {
    icon: <GraduationCap size={20} weight="fill" />,
    label: "Ng√†nh h·ªçc",
    action: "majors",
    description: "Th√¥ng tin c√°c ng√†nh ƒë√†o t·∫°o",
  },
  {
    icon: <Books size={20} weight="fill" />,
    label: "H·ªçc b·ªïng",
    action: "scholarships",
    description: "Ch√≠nh s√°ch h·ªçc b·ªïng",
  },
  {
    icon: <ChartBar size={20} weight="fill" />,
    label: "Th·ªëng k√™",
    action: "statistics",
    description: "ƒêi·ªÉm chu·∫©n & th·ªëng k√™",
  },
];

// Experience - Tr·∫£i nghi·ªám
const ExperienceTools: NavigationItem[] = [
  {
    icon: <MapTrifold size={20} weight="fill" />,
    label: "Tham quan ·∫£o",
    action: "campusTour",
    description: "Kh√°m ph√° khu√¥n vi√™n tr∆∞·ªùng",
  },
];

// Quick Questions - Organized by category
const QuickQuestions = {
  "Th√¥ng tin c∆° b·∫£n": [
    "H·ªçc ph√≠ c√°c ng√†nh l√† bao nhi√™u?",
    "ƒêi·ªÅu ki·ªán x√©t tuy·ªÉn nh∆∞ th·∫ø n√†o?",
    "Tr∆∞·ªùng c√≥ nh·ªØng ng√†nh ƒë√†o t·∫°o n√†o?",
  ],
  "Sinh ho·∫°t sinh vi√™n": [
    "Th√¥ng tin v·ªÅ k√Ω t√∫c x√°?",
    "Cu·ªôc tr√≤ chuy·ªán g·∫ßn ƒë√¢y",
    "H·ªèi v·ªÅ h·ªçc b·ªïng sinh vi√™n gi·ªèi",
  ],
  "Tuy·ªÉn sinh": [
    "ƒêi·ªÉm chu·∫©n nƒÉm 2024",
    "Th·ªß t·ª•c nh·∫≠p h·ªçc online",
    "Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o C√¥ng ngh·ªá th√¥ng tin",
  ],
};

// Recent Chats
const RecentChats = [
  "H·ªèi v·ªÅ h·ªçc b·ªïng sinh vi√™n gi·ªèi",
  "ƒêi·ªÉm chu·∫©n nƒÉm 2024",
  "Th·ªß t·ª•c nh·∫≠p h·ªçc online",
  "Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o C√¥ng ngh·ªá th√¥ng tin",
  "Th√¥ng tin v·ªÅ k√Ω t√∫c x√°",
  "H·ªçc ph√≠ ng√†nh Kinh t·∫ø",
];

// Map of action types to chat queries
const ACTION_QUERIES: Record<string, string> = {
  majors:
    "Tr∆∞·ªùng c√≥ nh·ªØng ng√†nh ƒë√†o t·∫°o n√†o? Cho t√¥i bi·∫øt chi ti·∫øt v·ªÅ c√°c ch∆∞∆°ng tr√¨nh h·ªçc.",
  scholarships: "Th√¥ng tin v·ªÅ h·ªçc b·ªïng v√† h·ªó tr·ª£ t√†i ch√≠nh cho sinh vi√™n?",
  statistics: "ƒêi·ªÉm chu·∫©n c√°c ng√†nh nh·ªØng nƒÉm g·∫ßn ƒë√¢y l√† bao nhi√™u?",
};

export default function SideNavigation() {
  const [isOpen, setIsOpen] = useState(false);
  const [showSurvey, setShowSurvey] = useState(false);
  const [showPredictor, setShowPredictor] = useState(false);
  const [showCampusTour, setShowCampusTour] = useState(false);
  const { addMessage, setTyping, setError } = useChatStore();

  // Handle sending a message via chat system
  const sendMessage = async (messageText: string) => {
    // Add user message to chat
    addMessage({
      id: uuidv4(),
      content: messageText,
      role: ActorType.Human,
      timestamp: Date.now(),
    });

    // Close sidebar on mobile
    setIsOpen(false);
    setTyping(true);

    try {
      // Start a new empty assistant message
      useChatStore.getState().startNewAssistantMessage();

      // Stream the response
      for await (const token of chatService.streamMessage(messageText)) {
        useChatStore.getState().appendToLastMessage(token);
      }
    } catch (error) {
      setError(
        error instanceof Error ? error.message : "Failed to send message"
      );
    } finally {
      setTyping(false);
    }
  };

  const handleSurveySubmit = async (data: any) => {
    const content = formatSurveyData(data);
    setShowSurvey(false);
    await sendMessage(content);
  };

  const handleAction = (action?: string) => {
    if (!action) return;

    // Handle modal actions
    if (action === "survey") {
      setShowSurvey(true);
      return;
    }

    if (action === "predictor") {
      setShowPredictor(true);
      return;
    }

    if (action === "campusTour") {
      setShowCampusTour(true);
      return;
    }

    // Handle chat query actions
    if (action in ACTION_QUERIES) {
      const query = ACTION_QUERIES[action];
      if (query) {
        sendMessage(query);
      }
    }
  };

  const renderNavigationSection = (title: string, items: NavigationItem[]) => (
    <div className="mb-6">
      <div className="flex items-center gap-2 text-xs font-semibold text-gray-500 mb-3 px-2">
        <span>{title}</span>
      </div>
      <div className="space-y-1">
        {items.map((item, index) => (
          <button
            key={index}
            type="button"
            className={`w-full flex items-center gap-3 px-3 py-2.5 rounded-lg text-left transition-all hover:bg-gray-100 group ${
              item.isActive
                ? "bg-blue-50 text-blue-600 border border-blue-200"
                : "text-gray-700 hover:text-gray-900"
            }`}
            onClick={() => handleAction(item.action)}
          >
            <div
              className={`${item.isActive ? "text-blue-600" : "text-gray-500 group-hover:text-gray-700"}`}
            >
              {item.icon}
            </div>
            <div className="flex-1 min-w-0">
              <div className="font-medium text-sm">{item.label}</div>
              {item.description && (
                <div className="text-xs text-gray-500 truncate">
                  {item.description}
                </div>
              )}
            </div>
          </button>
        ))}
      </div>
    </div>
  );

  return (
    <>
      {/* Mobile toggle button */}
      <div className="fixed left-4 top-20 z-20 md:hidden">
        <Button
          isIconOnly
          className="rounded-full bg-blue-500 text-white shadow-lg"
          onClick={() => setIsOpen(!isOpen)}
        >
          {isOpen ? <X size={20} /> : <Plus size={20} />}
        </Button>
      </div>

      {/* Sidebar */}
      <div
        className={`${
          isOpen ? "translate-x-0" : "-translate-x-full md:translate-x-0"
        } fixed z-10 h-full w-80 bg-white/95 backdrop-blur-sm border-r border-gray-200 shadow-xl transition-transform duration-300 md:relative md:shadow-none`}
      >
        <div className="flex h-full flex-col">
          {/* Header */}
          <div className="flex items-center gap-3 p-6 border-b border-gray-200">
            <div className="w-10 h-10 rounded-xl bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center text-xl">
              üéì
            </div>
            <div>
              <div className="text-lg font-bold text-gray-900">
                Tuy·ªÉn sinh AI
              </div>
              <div className="text-xs text-gray-500">
                Tr·ª£ l√Ω t∆∞ v·∫•n th√¥ng minh
              </div>
            </div>
          </div>

          {/* Scrollable Content */}
          <div className="flex-1 scroll p-4 space-y-2">
            {/* Main Navigation */}
            {renderNavigationSection("ƒêI·ªÄU H∆Ø·ªöNG", MainNavigation)}

            {/* Consultation Tools */}
            {renderNavigationSection("C√îNG C·ª§ T∆Ø V·∫§N", ConsultationTools)}

            {/* Information & Resources */}
            {renderNavigationSection(
              "TH√îNG TIN & T√ÄI NGUY√äN",
              InformationResources
            )}

            {/* Experience Tools */}
            {renderNavigationSection(
              "TR·∫¢I NGHI·ªÜM",
              ExperienceTools,
              <MapTrifold size={14} />
            )}

            <Divider className="" />

            {/* Recent Chats */}
            <div className="">
              <div className="flex items-center gap-2 text-xs font-semibold text-gray-500 mb-2 mt-4 px-2">
                <Clock size={14} />
                <span>CU·ªòC TR√í CHUY·ªÜN G·∫¶N ƒê√ÇY</span>
              </div>
              <div className="space-y-1">
                {RecentChats.slice(0, 6).map((chat, index) => (
                  <button
                    key={index}
                    type="button"
                    className="w-full text-left text-xs text-gray-600 hover:text-gray-800 hover:bg-gray-50 px-2 py-2 rounded transition-colors line-clamp-2"
                    onClick={() => sendMessage(chat)}
                  >
                    {chat}
                  </button>
                ))}
              </div>
            </div>
          </div>

          {/* Footer - User Profile */}
          <div className="border-t border-gray-200 p-4">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 rounded-full bg-gradient-to-r from-green-500 to-blue-500 flex items-center justify-center text-white text-sm font-medium">
                <User size={20} weight="fill" />
              </div>
              <div className="flex-1 min-w-0">
                <div className="text-sm font-medium text-gray-800">
                  Th√≠ sinh
                </div>
                <div className="text-xs text-gray-500">
                  ƒêang t∆∞ v·∫•n tuy·ªÉn sinh
                </div>
              </div>
              <Button
                isIconOnly
                variant="light"
                size="sm"
                className="text-gray-400 hover:text-gray-600"
              >
                <Gear size={16} />
              </Button>
            </div>
          </div>
        </div>
      </div>

      {/* Feature modals */}
      {showSurvey && (
        <SurveyForm
          onClose={() => setShowSurvey(false)}
          onSubmit={handleSurveySubmit}
        />
      )}

      {showPredictor && (
        <AdmissionPredictor
          onClose={() => setShowPredictor(false)}
          onSubmit={sendMessage}
        />
      )}

      {showCampusTour && (
        <CampusTour
          onClose={() => setShowCampusTour(false)}
          onSubmit={sendMessage}
        />
      )}
    </>
  );
}
