import asyncio
from typing import Dict, Any, Optional
from loguru import logger
import time

from core.rag_engine import RagEngine
from core.query_analyzer import QueryAnalyzer
from core.prompt_engine import PromptEngine
from infrastructure.embeddings import embeddings
from infrastructure.store import store
from infrastructure.llms import LLms
from shared.enum import ModelType
from config.settings import settings, initialize_settings_with_backend


class ApplicationManager:
    """Qu·∫£n l√Ω kh·ªüi t·∫°o v√† cache c√°c th√†nh ph·∫ßn c·ªßa ·ª©ng d·ª•ng"""

    _instance: Optional["ApplicationManager"] = None
    _initialized = False

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self):
        if not self._initialized:
            self.components: Dict[str, Any] = {}
            self.initialization_times: Dict[str, float] = {}
            self._initialized = True

    async def initialize_all_components(self):
        """Kh·ªüi t·∫°o t·∫•t c·∫£ c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt"""
        logger.info("üöÄ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o t·∫•t c·∫£ th√†nh ph·∫ßn...")

        start_time = time.time()

        try:
            # 0. Load configuration from backend first
            await self._initialize_backend_config()

            # 1. Kh·ªüi t·∫°o Embedding Model
            await self._initialize_embedding_model()

            # 2. Kh·ªüi t·∫°o Vector Store
            await self._initialize_vector_store()

            # 3. Kh·ªüi t·∫°o LLM Model
            await self._initialize_llm_model()

            # 4. Kh·ªüi t·∫°o Query Analyzer
            await self._initialize_query_analyzer()

            # 5. Kh·ªüi t·∫°o Prompt Engine
            await self._initialize_prompt_engine()

            # 6. Kh·ªüi t·∫°o RAG Engine
            await self._initialize_rag_engine()

            total_time = time.time() - start_time
            logger.info(
                f"‚úÖ Ho√†n th√†nh kh·ªüi t·∫°o t·∫•t c·∫£ th√†nh ph·∫ßn trong {total_time:.2f}s"
            )

            # Log th·ªùi gian kh·ªüi t·∫°o t·ª´ng th√†nh ph·∫ßn
            for component, init_time in self.initialization_times.items():
                logger.info(f"  - {component}: {init_time:.2f}s")

        except Exception as e:
            logger.error(f"‚ùå L·ªói khi kh·ªüi t·∫°o th√†nh ph·∫ßn: {e}")
            raise

    async def _initialize_backend_config(self):
        """Load configuration from backend API"""
        start_time = time.time()
        try:
            logger.info("‚öôÔ∏è Loading configuration from backend...")
            await initialize_settings_with_backend()

            self.components["backend_config"] = "loaded"
            self.initialization_times["backend_config"] = time.time() - start_time
            logger.info("‚úÖ Backend configuration loaded successfully")

        except Exception as e:
            logger.warning(
                f"‚ö†Ô∏è Backend config loading failed: {e}, continuing with defaults"
            )
            self.components["backend_config"] = "failed"
            self.initialization_times["backend_config"] = time.time() - start_time

    async def _initialize_embedding_model(self):
        """Kh·ªüi t·∫°o Embedding Model"""
        start_time = time.time()
        try:
            logger.info("üìù Kh·ªüi t·∫°o Embedding Model...")
            embedding_model = embeddings.get_embeddings(ModelType.HUGGINGFACE)

            # Test embedding ƒë·ªÉ ƒë·∫£m b·∫£o model ho·∫°t ƒë·ªông
            test_text = "Test embedding"
            await asyncio.to_thread(embedding_model.embed_query, test_text)

            self.components["embedding_model"] = embedding_model
            self.initialization_times["embedding_model"] = time.time() - start_time
            logger.info("‚úÖ Embedding Model ƒë√£ s·∫µn s√†ng")

        except Exception as e:
            logger.error(f"‚ùå L·ªói kh·ªüi t·∫°o Embedding Model: {e}")
            raise

    async def _initialize_vector_store(self):
        """Kh·ªüi t·∫°o Vector Store"""
        start_time = time.time()
        try:
            logger.info("üóÑÔ∏è Kh·ªüi t·∫°o Vector Store...")
            # Initialize store connection
            await asyncio.to_thread(store.initStore)

            self.components["vector_store"] = store
            self.initialization_times["vector_store"] = time.time() - start_time
            logger.info("‚úÖ Vector Store ƒë√£ s·∫µn s√†ng")

        except Exception as e:
            logger.error(f"‚ùå L·ªói kh·ªüi t·∫°o Vector Store: {e}")
            raise

    async def _initialize_llm_model(self):
        """Kh·ªüi t·∫°o LLM Model"""
        start_time = time.time()
        try:
            logger.info("ü§ñ Kh·ªüi t·∫°o LLM Model...")
            llm_model = LLms.getLLm(ModelType.GEMINI)

            # Test LLM v·ªõi c√¢u h·ªèi ƒë∆°n gi·∫£n
            test_prompt = "Xin ch√†o"
            response = await asyncio.to_thread(llm_model.invoke, test_prompt)
            logger.debug(f"LLM test response: {str(response)[:50]}...")

            self.components["llm_model"] = llm_model
            self.initialization_times["llm_model"] = time.time() - start_time
            logger.info("‚úÖ LLM Model ƒë√£ s·∫µn s√†ng")

        except Exception as e:
            logger.error(f"‚ùå L·ªói kh·ªüi t·∫°o LLM Model: {e}")
            raise

    async def _initialize_query_analyzer(self):
        """Kh·ªüi t·∫°o Query Analyzer"""
        start_time = time.time()
        try:
            logger.info("üîç Kh·ªüi t·∫°o Query Analyzer...")
            query_analyzer = QueryAnalyzer()

            self.components["query_analyzer"] = query_analyzer
            self.initialization_times["query_analyzer"] = time.time() - start_time
            logger.info("‚úÖ Query Analyzer ƒë√£ s·∫µn s√†ng")

        except Exception as e:
            logger.error(f"‚ùå L·ªói kh·ªüi t·∫°o Query Analyzer: {e}")
            raise

    async def _initialize_prompt_engine(self):
        """Kh·ªüi t·∫°o Prompt Engine"""
        start_time = time.time()
        try:
            logger.info("üìã Kh·ªüi t·∫°o Prompt Engine...")
            prompt_engine = PromptEngine()

            self.components["prompt_engine"] = prompt_engine
            self.initialization_times["prompt_engine"] = time.time() - start_time
            logger.info("‚úÖ Prompt Engine ƒë√£ s·∫µn s√†ng")

        except Exception as e:
            logger.error(f"‚ùå L·ªói kh·ªüi t·∫°o Prompt Engine: {e}")
            raise

    async def _initialize_rag_engine(self):
        """Kh·ªüi t·∫°o RAG Engine"""
        start_time = time.time()
        try:
            logger.info("‚öôÔ∏è Kh·ªüi t·∫°o RAG Engine...")
            rag_engine = RagEngine(
                embedding_model=self.components["embedding_model"],
                vector_store=self.components["vector_store"],
                llm_model=self.components["llm_model"],
                query_analyzer=self.components["query_analyzer"],
                prompt_engine=self.components["prompt_engine"],
            )

            self.components["rag_engine"] = rag_engine
            self.initialization_times["rag_engine"] = time.time() - start_time
            logger.info("‚úÖ RAG Engine ƒë√£ s·∫µn s√†ng")

        except Exception as e:
            logger.error(f"‚ùå L·ªói kh·ªüi t·∫°o RAG Engine: {e}")
            raise

    def get_component(self, component_name: str) -> Any:
        """L·∫•y th√†nh ph·∫ßn ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o"""
        if component_name not in self.components:
            raise ValueError(f"Component '{component_name}' ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
        return self.components[component_name]

    def get_rag_engine(self) -> RagEngine:
        """L·∫•y RAG Engine ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o"""
        return self.get_component("rag_engine")

    def is_initialized(self) -> bool:
        """Ki·ªÉm tra xem t·∫•t c·∫£ th√†nh ph·∫ßn ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a"""
        required_components = [
            "backend_config",
            "embedding_model",
            "vector_store",
            "llm_model",
            "query_analyzer",
            "prompt_engine",
            "rag_engine",
        ]
        return all(comp in self.components for comp in required_components)

    def get_status(self) -> Dict[str, Any]:
        """L·∫•y tr·∫°ng th√°i c·ªßa t·∫•t c·∫£ th√†nh ph·∫ßn"""
        return {
            "initialized": self.is_initialized(),
            "components": list(self.components.keys()),
            "initialization_times": self.initialization_times,
            "total_components": len(self.components),
        }


# Global instance
app_manager = ApplicationManager()
