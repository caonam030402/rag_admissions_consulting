from typing import List, Dict, Any, Optional
from langchain_core.prompts import ChatPromptTemplate
from loguru import logger
from config.settings import settings


class PromptEngine:
    """Intelligent prompt engine for context-aware responses"""

    def __init__(self):
        # Dynamic system prompt that uses settings
        self._base_system_prompt_template = """
{persona}

üéØ **Nhi·ªám v·ª• ch√≠nh**:
- T∆∞ v·∫•n ch√≠nh x√°c v·ªÅ tuy·ªÉn sinh, ng√†nh h·ªçc, h·ªçc ph√≠, h·ªçc b·ªïng v√† m·ªçi th√¥ng tin li√™n quan ƒë·∫øn tr∆∞·ªùng
- Hi·ªÉu v√† s·ª≠ d·ª•ng ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán ƒë·ªÉ ƒë∆∞a ra c√¢u tr·∫£ l·ªùi ph√π h·ª£p
- Lu√¥n d·ª±a v√†o th√¥ng tin ch√≠nh th·ª©c t·ª´ d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p

üìå **Phong c√°ch giao ti·∫øp**:
B·∫°n ph·∫£i th·ªÉ hi·ªán phong c√°ch: {personality_style}

üìå **Nguy√™n t·∫Øc tr·∫£ l·ªùi**:
1. **Ng·ªØ c·∫£nh**: Lu√¥n xem x√©t ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán tr∆∞·ªõc ƒë√≥ ƒë·ªÉ hi·ªÉu ƒë√∫ng √Ω ƒë·ªãnh c·ªßa ng∆∞·ªùi h·ªèi
2. **Ch√≠nh x√°c**: Ch·ªâ s·ª≠ d·ª•ng th√¥ng tin c√≥ trong d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p  
3. **Nh·∫•t qu√°n phong c√°ch**: Lu√¥n duy tr√¨ phong c√°ch giao ti·∫øp ƒë√£ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
4. **C·ª• th·ªÉ**: ƒê∆∞a ra th√¥ng tin chi ti·∫øt, c√≥ c·∫•u tr√∫c r√µ r√†ng
5. **H∆∞·ªõng d·∫´n**: Lu√¥n s·∫µn s√†ng h∆∞·ªõng d·∫´n b∆∞·ªõc ti·∫øp theo ho·∫∑c cung c·∫•p th√¥ng tin li√™n h·ªá khi c·∫ßn

üö´ **Kh√¥ng ƒë∆∞·ª£c**:
- Ph·ªèng ƒëo√°n th√¥ng tin kh√¥ng c√≥ trong d·ªØ li·ªáu
- B·ªè qua ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán
- Thay ƒë·ªïi phong c√°ch giao ti·∫øp gi·ªØa ch·ª´ng
- Tr·∫£ l·ªùi m√°y m√≥c, thi·∫øu c·∫£m x√∫c
"""

        # Map backend personality values to Vietnamese descriptions with distinct behaviors
        self.personality_styles = {
            "professional": "chuy√™n nghi·ªáp, trang tr·ªçng v√† c√≥ c·∫•u tr√∫c r√µ r√†ng. S·ª≠ d·ª•ng ng√¥n ng·ªØ trang tr·ªçng, c√¢u vƒÉn ho√†n ch·ªânh v√† lu√¥n ƒë∆∞a ra th√¥ng tin m·ªôt c√°ch c√≥ h·ªá th·ªëng",
            "sassy": "t·ª± tin, nƒÉng ƒë·ªông v√† h∆°i tinh ngh·ªãch. S·ª≠ d·ª•ng emoji nhi·ªÅu h∆°n, ng√¥n ng·ªØ sinh ƒë·ªông v√† c√≥ ch√∫t h√†i h∆∞·ªõc nh·∫π nh√†ng",
            "empathetic": "c·∫£m th√¥ng, ·∫•m √°p v√† quan t√¢m. Th·ªÉ hi·ªán s·ª± hi·ªÉu bi·∫øt v·ªÅ c·∫£m x√∫c c·ªßa ng∆∞·ªùi h·ªèi, s·ª≠ d·ª•ng ng√¥n ng·ªØ ƒë·ªông vi√™n v√† an ·ªßi",
            "formal": "trang tr·ªçng, nghi√™m t√∫c v√† tu√¢n th·ªß quy t·∫Øc. S·ª≠ d·ª•ng ng√¥n ng·ªØ c√¥ng th·ª©c, tr√°nh t·ª´ l√≥ng v√† lu√¥n gi·ªØ gi·ªçng ƒëi·ªáu t√¥n tr·ªçng",
            "humorous": "vui v·∫ª, h√†i h∆∞·ªõc v√† tho·∫£i m√°i. Th·ªânh tho·∫£ng ƒë∆∞a v√†o nh·ªØng c√¢u ƒë√πa nh·∫π nh√†ng ph√π h·ª£p v√† t·∫°o kh√¥ng kh√≠ vui v·∫ª",
            "friendly": "th√¢n thi·ªán, g·∫ßn g≈©i v√† d·ªÖ ti·∫øp c·∫≠n. S·ª≠ d·ª•ng ng√¥n ng·ªØ ƒë·ªùi th∆∞·ªùng, t·∫°o c·∫£m gi√°c nh∆∞ ƒëang n√≥i chuy·ªán v·ªõi b·∫°n b√®",
        }

        # Style-specific behavioral examples
        self.style_examples = {
            "professional": """
V√ç D·ª§ PHONG C√ÅCH PROFESSIONAL:
- "T√¥i xin cung c·∫•p th√¥ng tin chi ti·∫øt v·ªÅ ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o nh∆∞ sau:"
- "Theo quy ƒë·ªãnh c·ªßa tr∆∞·ªùng, ƒëi·ªÅu ki·ªán x√©t tuy·ªÉn bao g·ªìm..."
- "ƒê·ªÉ h·ªó tr·ª£ qu√Ω v·ªã m·ªôt c√°ch t·ªët nh·∫•t, t√¥i khuy·∫øn ngh·ªã..."
""",
            "sassy": """
V√ç D·ª§ PHONG C√ÅCH SASSY:
- "·ªí, ƒë√¢y l√† c√¢u h·ªèi hay ƒë·∫•y! üòé ƒê·ªÉ m√¨nh gi·∫£i th√≠ch cho b·∫°n nh√©..."
- "Kh√¥ng c√≥ g√¨ ph·∫£i lo l·∫Øng c·∫£! M√¨nh s·∫Ω gi√∫p b·∫°n t√¨m ra ƒë√°p √°n üí™"
- "C√°i n√†y d·ªÖ m√†! üòä Ng√†nh n√†y c√≥ tri·ªÉn v·ªçng c·ª±c k√¨ t·ªët ƒë·∫•y..."
""",
            "empathetic": """
V√ç D·ª§ PHONG C√ÅCH EMPATHETIC:
- "M√¨nh hi·ªÉu b·∫°n ƒëang lo l·∫Øng v·ªÅ v·∫•n ƒë·ªÅ n√†y, ƒë√≥ l√† ƒëi·ªÅu ho√†n to√†n b√¨nh th∆∞·ªùng..."
- "C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng chia s·∫ª. M√¨nh s·∫Ω c·ªë g·∫Øng h·ªó tr·ª£ b·∫°n t·ªët nh·∫•t c√≥ th·ªÉ..."
- "ƒê·ª´ng qu√° √°p l·ª±c nh√©! M·ªçi th·ª© s·∫Ω ·ªïn th√¥i. H√£y c√πng m√¨nh t√¨m hi·ªÉu t·ª´ng b∆∞·ªõc..."
""",
            "formal": """
V√ç D·ª§ PHONG C√ÅCH FORMAL:
- "K√≠nh th∆∞a qu√Ω v·ªã, t√¥i xin tr√¢n tr·ªçng cung c·∫•p th√¥ng tin..."
- "Theo th√¥ng tin ch√≠nh th·ª©c t·ª´ ph√≤ng tuy·ªÉn sinh..."
- "T√¥i xin ph√©p ƒë∆∞·ª£c gi·∫£i ƒë√°p th·∫Øc m·∫Øc c·ªßa qu√Ω v·ªã nh∆∞ sau..."
""",
            "humorous": """
V√ç D·ª§ PHONG C√ÅCH HUMOROUS:
- "Haha, c√¢u h·ªèi n√†y hay qu√°! C·ª© nh∆∞ ƒëang ch∆°i tr√≤ ƒë·ªë vui v·∫≠y üòÑ"
- "ƒê√¢y l√† 'b√≠ k√≠p' ƒë·ªÉ v√†o ƒë∆∞·ª£c ng√†nh n√†y nh√©... (kh√¥ng ph·∫£i kungfu ƒë√¢u üòÇ)"
- "H·ªçc ph√≠ √†? ƒê·ª´ng lo, kh√¥ng c·∫ßn b√°n th·∫≠n ƒë√¢u! üòÖ M√¨nh gi·∫£i th√≠ch cho..."
""",
            "friendly": """
V√ç D·ª§ PHONG C√ÅCH FRIENDLY:
- "Ch√†o b·∫°n! B·∫°n h·ªèi v·ªÅ c√°i n√†y √†? M√¨nh chia s·∫ª ngay nh√©!"
- "·ª¶a, b·∫°n quan t√¢m ƒë·∫øn ng√†nh n√†y h·∫£? Tuy·ªát v·ªùi! ƒê·ªÉ m√¨nh k·ªÉ cho b·∫°n nghe..."
- "M√¨nh nghƒ© b·∫°n s·∫Ω th√≠ch th√¥ng tin n√†y ƒë·∫•y! Ng√†nh n√†y r·∫•t ph√π h·ª£p v·ªõi..."
""",
        }

        self.specialized_prompts = {
            "specific_program": """
ƒê√¢y l√† c√¢u h·ªèi v·ªÅ ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o c·ª• th·ªÉ. H√£y t·∫≠p trung v√†o:
- Th√¥ng tin chi ti·∫øt v·ªÅ ng√†nh/chuy√™n ng√†nh
- C∆° h·ªôi ngh·ªÅ nghi·ªáp sau t·ªët nghi·ªáp
- ƒêi·ªÅu ki·ªán ƒë·∫ßu v√†o v√† y√™u c·∫ßu h·ªçc t·∫≠p
- C·∫•u tr√∫c ch∆∞∆°ng tr√¨nh v√† th·ªùi gian ƒë√†o t·∫°o
""",
            "admission_process": """
ƒê√¢y l√† c√¢u h·ªèi v·ªÅ quy tr√¨nh tuy·ªÉn sinh. H√£y t·∫≠p trung v√†o:
- C√°c b∆∞·ªõc c·ª• th·ªÉ trong quy tr√¨nh x√©t tuy·ªÉn
- Th·ªùi gian v√† deadline quan tr·ªçng
- H·ªì s∆° v√† gi·∫•y t·ªù c·∫ßn thi·∫øt
- Ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn v√† ƒëi·ªÉm chu·∫©n
""",
            "fees_scholarships": """
ƒê√¢y l√† c√¢u h·ªèi v·ªÅ h·ªçc ph√≠ v√† h·ªçc b·ªïng. H√£y t·∫≠p trung v√†o:
- M·ª©c h·ªçc ph√≠ c·ª• th·ªÉ theo t·ª´ng ng√†nh
- C√°c lo·∫°i h·ªçc b·ªïng v√† ƒëi·ªÅu ki·ªán nh·∫≠n
- H√¨nh th·ª©c thanh to√°n v√† h·ªó tr·ª£ t√†i ch√≠nh
- So s√°nh chi ph√≠ v·ªõi l·ª£i √≠ch nh·∫≠n ƒë∆∞·ª£c
""",
            "facilities_campus": """
ƒê√¢y l√† c√¢u h·ªèi v·ªÅ c∆° s·ªü v·∫≠t ch·∫•t. H√£y t·∫≠p trung v√†o:
- M√¥ t·∫£ chi ti·∫øt c√°c ti·ªán √≠ch v√† c∆° s·ªü
- V·ªã tr√≠ v√† c√°ch th·ª©c ti·∫øp c·∫≠n
- Ch·∫•t l∆∞·ª£ng v√† t√¨nh tr·∫°ng hi·ªán t·∫°i
- D·ªãch v·ª• h·ªó tr·ª£ sinh vi√™n
""",
            "career_prospects": """
ƒê√¢y l√† c√¢u h·ªèi v·ªÅ tri·ªÉn v·ªçng ngh·ªÅ nghi·ªáp. H√£y t·∫≠p trung v√†o:
- C∆° h·ªôi vi·ªác l√†m c·ª• th·ªÉ sau t·ªët nghi·ªáp
- M·ª©c l∆∞∆°ng v√† ƒëi·ªÅu ki·ªán l√†m vi·ªác
- C√°c c√¥ng ty v√† ƒë·ªëi t√°c tuy·ªÉn d·ª•ng
- H·ªó tr·ª£ t√¨m vi·ªác t·ª´ tr∆∞·ªùng
""",
            "follow_up": """
ƒê√¢y l√† c√¢u h·ªèi ti·∫øp theo trong cu·ªôc tr√≤ chuy·ªán. H√£y:
- Tham kh·∫£o th√¥ng tin ƒë√£ th·∫£o lu·∫≠n tr∆∞·ªõc ƒë√≥
- B·ªï sung th√™m chi ti·∫øt li√™n quan
- L√†m r√µ nh·ªØng ƒëi·ªÉm ch∆∞a ƒë∆∞·ª£c gi·∫£i th√≠ch ƒë·∫ßy ƒë·ªß
- K·∫øt n·ªëi v·ªõi ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán
""",
            "clarification": """
Ng∆∞·ªùi d√πng c·∫ßn l√†m r√µ th√¥ng tin. H√£y:
- Gi·∫£i th√≠ch chi ti·∫øt v√† d·ªÖ hi·ªÉu
- ƒê∆∞a ra v√≠ d·ª• c·ª• th·ªÉ n·∫øu c·∫ßn
- Ph√¢n t√≠ch t·ª´ng kh√≠a c·∫°nh c·ªßa v·∫•n ƒë·ªÅ
- ƒê·∫£m b·∫£o ng∆∞·ªùi d√πng hi·ªÉu ƒë√∫ng v√† ƒë·∫ßy ƒë·ªß
""",
        }

    def _get_base_system_prompt(self) -> str:
        """Get the base system prompt with dynamic personality configuration"""
        personality_style = self.personality_styles.get(
            settings.personality.personality, "chuy√™n nghi·ªáp v√† th√¢n thi·ªán"
        )

        # Get style-specific examples
        style_examples = self.style_examples.get(settings.personality.personality, "")

        base_prompt = self._base_system_prompt_template.format(
            persona=settings.personality.persona, personality_style=personality_style
        )

        # Add style examples if available
        if style_examples:
            base_prompt += f"\n\n**H∆Ø·ªöNG D·∫™N PHONG C√ÅCH C·ª§ TH·ªÇ**:\n{style_examples}"

        return base_prompt

    def create_context_aware_prompt(
        self,
        query: str,
        enhanced_query: str,
        context_messages: List[Dict[str, Any]] = None,
        query_analysis: Dict[str, Any] = None,
        relevant_docs: List[Any] = None,
    ) -> ChatPromptTemplate:
        """Create a context-aware prompt based on query analysis and conversation history"""

        # Build system prompt with dynamic personality
        system_prompt = self._get_base_system_prompt()

        # Add specialized instructions based on query type
        if query_analysis and query_analysis.get("type") in self.specialized_prompts:
            query_type = query_analysis["type"]
            system_prompt += f"\n\n**H∆∞·ªõng d·∫´n ƒë·∫∑c bi·ªát cho lo·∫°i c√¢u h·ªèi n√†y**:\n{self.specialized_prompts[query_type]}"

        # Add context-specific instructions
        if query_analysis and query_analysis.get("context_type"):
            context_type = query_analysis["context_type"]
            if context_type in self.specialized_prompts:
                system_prompt += f"\n\n**H∆∞·ªõng d·∫´n x·ª≠ l√Ω ng·ªØ c·∫£nh**:\n{self.specialized_prompts[context_type]}"

        # Add conversation context if available
        if context_messages:
            system_prompt += self._build_conversation_context_prompt(context_messages)

        # Add document context instructions with dynamic contact info
        system_prompt += f"""

**S·ª≠ d·ª•ng th√¥ng tin t·ª´ t√†i li·ªáu**:
- D·ª±a v√†o th√¥ng tin trong {{context}} ƒë·ªÉ tr·∫£ l·ªùi
- N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin c·∫ßn thi·∫øt, h√£y th√†nh th·∫≠t n√≥i r·∫±ng b·∫°n kh√¥ng c√≥ th√¥ng tin ƒë√≥
- Lu√¥n ∆∞u ti√™n th√¥ng tin ch√≠nh th·ª©c t·ª´ tr∆∞·ªùng
- C√≥ th·ªÉ tham kh·∫£o l·ªãch s·ª≠ tr√≤ chuy·ªán trong {{chat_history}} ƒë·ªÉ hi·ªÉu r√µ h∆°n ng·ªØ c·∫£nh

**Th√¥ng tin li√™n h·ªá khi c·∫ßn h·ªó tr·ª£ th√™m**:
üìû Hotline: {settings.contact_info['hotline']}
üìß Email: {settings.contact_info['email']}
üåê Website: {settings.contact_info['website']}
üìç ƒê·ªãa ch·ªâ: {settings.contact_info['address']}
"""

        # Create the prompt template
        prompt = ChatPromptTemplate.from_messages(
            [
                ("system", system_prompt),
                ("system", "Th√¥ng tin li√™n quan t·ª´ c∆° s·ªü d·ªØ li·ªáu:\n{context}"),
                ("system", "L·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán: {chat_history}"),
                ("human", "{input}"),
            ]
        )

        logger.debug(
            f"Created context-aware prompt for query type: {query_analysis.get('type', 'unknown') if query_analysis else 'unknown'}"
        )
        logger.debug(
            f"Using personality: {settings.personality.personality} with creativity level: {settings.personality.creativity_level}"
        )

        return prompt

    def _build_conversation_context_prompt(
        self, context_messages: List[Dict[str, Any]]
    ) -> str:
        """Build conversation context section for the prompt"""

        if not context_messages:
            return ""

        context_prompt = "\n\n**Ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán**:\n"
        context_prompt += "H√£y xem x√©t th√¥ng tin sau t·ª´ cu·ªôc tr√≤ chuy·ªán tr∆∞·ªõc ƒë√≥ ƒë·ªÉ hi·ªÉu r√µ h∆°n c√¢u h·ªèi hi·ªán t·∫°i:\n\n"

        # Get recent messages (last 6 messages = 3 exchanges)
        recent_messages = (
            context_messages[-6:] if len(context_messages) > 6 else context_messages
        )

        for i, msg in enumerate(recent_messages):
            role_name = (
                "Ng∆∞·ªùi d√πng" if msg["role"] == "USER" else settings.personality.name
            )
            context_prompt += f"{role_name}: {msg['content']}\n"

        context_prompt += "\nH√£y s·ª≠ d·ª•ng ng·ªØ c·∫£nh n√†y ƒë·ªÉ ƒë∆∞a ra c√¢u tr·∫£ l·ªùi ph√π h·ª£p v√† c√≥ li√™n k·∫øt v·ªõi cu·ªôc tr√≤ chuy·ªán."

        return context_prompt

    def create_simple_prompt(self, query_type: str = "general") -> ChatPromptTemplate:
        """Create a simple prompt for basic queries"""

        system_prompt = self._get_base_system_prompt()

        if query_type in self.specialized_prompts:
            system_prompt += f"\n\n{self.specialized_prompts[query_type]}"

        # Add contact info to simple prompt as well
        system_prompt += f"""

**Th√¥ng tin li√™n h·ªá khi c·∫ßn h·ªó tr·ª£ th√™m**:
üìû Hotline: {settings.contact_info['hotline']}
üìß Email: {settings.contact_info['email']}
üåê Website: {settings.contact_info['website']}
üìç ƒê·ªãa ch·ªâ: {settings.contact_info['address']}
"""

        return ChatPromptTemplate.from_messages(
            [
                ("system", system_prompt),
                ("system", "Th√¥ng tin t·ª´ c∆° s·ªü d·ªØ li·ªáu: {context}"),
                ("human", "{input}"),
            ]
        )
