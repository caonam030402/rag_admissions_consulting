import sys
import os

# Add parent directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import requests
import json
import time


def test_final_context():
    """Test cu·ªëi c√πng ƒë·ªÉ x√°c nh·∫≠n context ho·∫°t ƒë·ªông ho√†n h·∫£o"""
    base_url = "http://localhost:8000/api/v1"

    print("üéØ TEST CU·ªêI C√ôNG: Context Memory c·ªßa Chatbot")
    print("=" * 60)

    # Test 1: H·ªèi v·ªÅ ng√†nh c·ª• th·ªÉ
    print("üë§ User: T√¥i mu·ªën bi·∫øt v·ªÅ ng√†nh K·ªπ thu·∫≠t ph·∫ßn m·ªÅm")
    response1 = requests.post(
        f"{base_url}/chat",
        json={
            "message": "T√¥i mu·ªën bi·∫øt v·ªÅ ng√†nh K·ªπ thu·∫≠t ph·∫ßn m·ªÅm",
            "user_email": "student@example.com",
        },
        headers={"Content-Type": "application/json"},
        stream=True,
    )

    full_response1 = ""
    conversation_id = None

    for line in response1.iter_lines():
        if line:
            try:
                data = json.loads(line.decode("utf-8"))
                if "delta" in data:
                    full_response1 += data["delta"]
                if "conversation_id" in data:
                    conversation_id = data["conversation_id"]
            except json.JSONDecodeError:
                continue

    print(f"ü§ñ Bot: {full_response1[:200]}...")
    print(f"üìù Conversation ID: {conversation_id}")

    time.sleep(1)

    # Test 2: H·ªèi follow-up v·ªÅ h·ªçc ph√≠ (kh√¥ng nh·∫Øc l·∫°i ng√†nh)
    print("\nüë§ User: H·ªçc ph√≠ bao nhi√™u?")
    response2 = requests.post(
        f"{base_url}/chat",
        json={"message": "H·ªçc ph√≠ bao nhi√™u?", "user_email": "student@example.com"},
        headers={"Content-Type": "application/json"},
        stream=True,
    )

    full_response2 = ""
    conversation_id2 = None

    for line in response2.iter_lines():
        if line:
            try:
                data = json.loads(line.decode("utf-8"))
                if "delta" in data:
                    full_response2 += data["delta"]
                if "conversation_id" in data:
                    conversation_id2 = data["conversation_id"]
            except json.JSONDecodeError:
                continue

    print(f"ü§ñ Bot: {full_response2[:200]}...")

    time.sleep(1)

    # Test 3: H·ªèi follow-up v·ªÅ c∆° h·ªôi vi·ªác l√†m
    print("\nüë§ User: C∆° h·ªôi vi·ªác l√†m th·∫ø n√†o?")
    response3 = requests.post(
        f"{base_url}/chat",
        json={
            "message": "C∆° h·ªôi vi·ªác l√†m th·∫ø n√†o?",
            "user_email": "student@example.com",
        },
        headers={"Content-Type": "application/json"},
        stream=True,
    )

    full_response3 = ""
    conversation_id3 = None

    for line in response3.iter_lines():
        if line:
            try:
                data = json.loads(line.decode("utf-8"))
                if "delta" in data:
                    full_response3 += data["delta"]
                if "conversation_id" in data:
                    conversation_id3 = data["conversation_id"]
            except json.JSONDecodeError:
                continue

    print(f"ü§ñ Bot: {full_response3[:200]}...")

    # Ki·ªÉm tra k·∫øt qu·∫£
    print("\n" + "=" * 60)
    print("üìä K·∫æT QU·∫¢ KI·ªÇM TRA:")

    if conversation_id == conversation_id2 == conversation_id3:
        print("‚úÖ CONVERSATION ID: Nh·∫•t qu√°n qua 3 c√¢u h·ªèi")
    else:
        print("‚ùå CONVERSATION ID: Kh√¥ng nh·∫•t qu√°n")
        print(f"   ID1: {conversation_id}")
        print(f"   ID2: {conversation_id2}")
        print(f"   ID3: {conversation_id3}")

    # Ki·ªÉm tra xem bot c√≥ nh·ªõ ng·ªØ c·∫£nh kh√¥ng
    context_keywords = ["k·ªπ thu·∫≠t ph·∫ßn m·ªÅm", "ph·∫ßn m·ªÅm", "IT", "l·∫≠p tr√¨nh"]
    has_context = any(
        keyword.lower() in full_response2.lower()
        or keyword.lower() in full_response3.lower()
        for keyword in context_keywords
    )

    if has_context:
        print("‚úÖ CONTEXT MEMORY: Bot nh·ªõ ng·ªØ c·∫£nh v·ªÅ ng√†nh K·ªπ thu·∫≠t ph·∫ßn m·ªÅm")
    else:
        print("‚ùå CONTEXT MEMORY: Bot kh√¥ng nh·ªõ ng·ªØ c·∫£nh")

    # Ki·ªÉm tra status cu·ªëi
    status_response = requests.get(f"{base_url.replace('/api/v1', '')}/status")
    if status_response.status_code == 200:
        status_data = status_response.json()
        context_cache = status_data.get("context_cache", {})
        conversations = context_cache.get("conversations", {})

        if conversation_id in conversations:
            stats = conversations[conversation_id]
            print(f"‚úÖ CACHE STATUS: {stats['total_messages']} tin nh·∫Øn ƒë∆∞·ª£c l∆∞u")
        else:
            print("‚ùå CACHE STATUS: Kh√¥ng t√¨m th·∫•y conversation trong cache")

    print("\nüéâ TEST HO√ÄN TH√ÄNH!")


if __name__ == "__main__":
    test_final_context()
