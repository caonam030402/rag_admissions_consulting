[
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "WebScraper",
        "importPath": "scraper",
        "description": "scraper",
        "isExtraImport": true,
        "detail": "scraper",
        "documentation": {}
    },
    {
        "label": "PyPDFLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "DirectoryLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "CSVLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "JSONLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "RecursiveCharacterTextSplitter",
        "importPath": "langchain.text_splitter",
        "description": "langchain.text_splitter",
        "isExtraImport": true,
        "detail": "langchain.text_splitter",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "RagAgent",
        "importPath": "rag_agent",
        "description": "rag_agent",
        "isExtraImport": true,
        "detail": "rag_agent",
        "documentation": {}
    },
    {
        "label": "LLms",
        "importPath": "llms",
        "description": "llms",
        "isExtraImport": true,
        "detail": "llms",
        "documentation": {}
    },
    {
        "label": "ModelType",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "ModelType",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "ModelType",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "ModelType",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "FileDataType",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "store",
        "importPath": "store",
        "description": "store",
        "isExtraImport": true,
        "detail": "store",
        "documentation": {}
    },
    {
        "label": "store",
        "importPath": "store",
        "description": "store",
        "isExtraImport": true,
        "detail": "store",
        "documentation": {}
    },
    {
        "label": "embeddings",
        "importPath": "embeddings",
        "description": "embeddings",
        "isExtraImport": true,
        "detail": "embeddings",
        "documentation": {}
    },
    {
        "label": "embeddings",
        "importPath": "embeddings",
        "description": "embeddings",
        "isExtraImport": true,
        "detail": "embeddings",
        "documentation": {}
    },
    {
        "label": "HuggingFaceEmbeddings",
        "importPath": "langchain_huggingface",
        "description": "langchain_huggingface",
        "isExtraImport": true,
        "detail": "langchain_huggingface",
        "documentation": {}
    },
    {
        "label": "GoogleGenerativeAIEmbeddings",
        "importPath": "langchain_google_genai",
        "description": "langchain_google_genai",
        "isExtraImport": true,
        "detail": "langchain_google_genai",
        "documentation": {}
    },
    {
        "label": "ChatGoogleGenerativeAI",
        "importPath": "langchain_google_genai",
        "description": "langchain_google_genai",
        "isExtraImport": true,
        "detail": "langchain_google_genai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "OpenAIEmbeddings",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "getEnv",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "getEnv",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "getEnv",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "gemini_model",
        "importPath": "shared.constant",
        "description": "shared.constant",
        "isExtraImport": true,
        "detail": "shared.constant",
        "documentation": {}
    },
    {
        "label": "openai_model",
        "importPath": "shared.constant",
        "description": "shared.constant",
        "isExtraImport": true,
        "detail": "shared.constant",
        "documentation": {}
    },
    {
        "label": "create_retrieval_chain",
        "importPath": "langchain.chains",
        "description": "langchain.chains",
        "isExtraImport": true,
        "detail": "langchain.chains",
        "documentation": {}
    },
    {
        "label": "create_stuff_documents_chain",
        "importPath": "langchain.chains.combine_documents",
        "description": "langchain.chains.combine_documents",
        "isExtraImport": true,
        "detail": "langchain.chains.combine_documents",
        "documentation": {}
    },
    {
        "label": "ChatPromptTemplate",
        "importPath": "langchain_core.prompts",
        "description": "langchain_core.prompts",
        "isExtraImport": true,
        "detail": "langchain_core.prompts",
        "documentation": {}
    },
    {
        "label": "system_prompt",
        "importPath": "prompt",
        "description": "prompt",
        "isExtraImport": true,
        "detail": "prompt",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "RobotFileParser",
        "importPath": "urllib.robotparser",
        "description": "urllib.robotparser",
        "isExtraImport": true,
        "detail": "urllib.robotparser",
        "documentation": {}
    },
    {
        "label": "helper",
        "importPath": "shared.helper",
        "description": "shared.helper",
        "isExtraImport": true,
        "detail": "shared.helper",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "PineconeGRPC",
        "importPath": "pinecone.grpc",
        "description": "pinecone.grpc",
        "isExtraImport": true,
        "detail": "pinecone.grpc",
        "documentation": {}
    },
    {
        "label": "ServerlessSpec",
        "importPath": "pinecone",
        "description": "pinecone",
        "isExtraImport": true,
        "detail": "pinecone",
        "documentation": {}
    },
    {
        "label": "PineconeVectorStore",
        "importPath": "langchain_pinecone",
        "description": "langchain_pinecone",
        "isExtraImport": true,
        "detail": "langchain_pinecone",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "rag_admissions_consulting.src.scripts.scrape_example",
        "description": "rag_admissions_consulting.src.scripts.scrape_example",
        "peekOfCode": "def main():\n    # Initialize the scraper with the base URL\n    scraper = WebScraper('https://donga.edu.vn')\n    # Scrape admission-related pages\n    print(\"Starting to scrape Donga University admission pages...\")\n    results = scraper.scrape_site('/', max_pages=100)\n    # Save the results\n    scraper.save_results(results, 'donga_admissions.json')\n    print(\"Scraping completed. Results saved to donga_admissions.json\")\nif __name__ == '__main__':",
        "detail": "rag_admissions_consulting.src.scripts.scrape_example",
        "documentation": {}
    },
    {
        "label": "openai_model",
        "kind": 5,
        "importPath": "rag_admissions_consulting.src.shared.constant",
        "description": "rag_admissions_consulting.src.shared.constant",
        "peekOfCode": "openai_model = \"gpt-3.5-turbo\"\ngemini_model = \"gemini-1.5-flash\"",
        "detail": "rag_admissions_consulting.src.shared.constant",
        "documentation": {}
    },
    {
        "label": "gemini_model",
        "kind": 5,
        "importPath": "rag_admissions_consulting.src.shared.constant",
        "description": "rag_admissions_consulting.src.shared.constant",
        "peekOfCode": "gemini_model = \"gemini-1.5-flash\"",
        "detail": "rag_admissions_consulting.src.shared.constant",
        "documentation": {}
    },
    {
        "label": "ModelType",
        "kind": 6,
        "importPath": "rag_admissions_consulting.src.shared.enum",
        "description": "rag_admissions_consulting.src.shared.enum",
        "peekOfCode": "class ModelType(str):\n    GEMINI = \"gemini\"\n    OPENAI = \"openai\"\n    HUGGINGFACE = \"huggingface\"\nclass FileDataType(str):\n    CSV = \"csv\"\n    PDF = \"pdf\"\n    JSON = \"json\"",
        "detail": "rag_admissions_consulting.src.shared.enum",
        "documentation": {}
    },
    {
        "label": "FileDataType",
        "kind": 6,
        "importPath": "rag_admissions_consulting.src.shared.enum",
        "description": "rag_admissions_consulting.src.shared.enum",
        "peekOfCode": "class FileDataType(str):\n    CSV = \"csv\"\n    PDF = \"pdf\"\n    JSON = \"json\"",
        "detail": "rag_admissions_consulting.src.shared.enum",
        "documentation": {}
    },
    {
        "label": "Helper",
        "kind": 6,
        "importPath": "rag_admissions_consulting.src.shared.helper",
        "description": "rag_admissions_consulting.src.shared.helper",
        "peekOfCode": "class Helper:\n    def __init__(self, chunk_size: int = 500,chunk_overlap: int = 20):\n        self.chunk_size = chunk_size\n        self.chunk_overlap = chunk_overlap\n    def load_pdf_files(self, path: str) -> list[str]:\n        loader=DirectoryLoader(path,glob=\"*.pdf\",loader_cls=PyPDFLoader)\n        documents=loader.load()\n        return documents\n    def load_csv_files(self, path: str) -> list[str]:\n        loader = DirectoryLoader(path, glob=\"*.csv\", loader_cls=lambda file_path: CSVLoader(file_path, encoding='utf-8'))",
        "detail": "rag_admissions_consulting.src.shared.helper",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 5,
        "importPath": "rag_admissions_consulting.src.shared.helper",
        "description": "rag_admissions_consulting.src.shared.helper",
        "peekOfCode": "helper = Helper(chunk_size=500, chunk_overlap=20)",
        "detail": "rag_admissions_consulting.src.shared.helper",
        "documentation": {}
    },
    {
        "label": "ui_test",
        "kind": 2,
        "importPath": "rag_admissions_consulting.src.ui_test.main",
        "description": "rag_admissions_consulting.src.ui_test.main",
        "peekOfCode": "def ui_test():\n    st.write(\"Hello World\")\nif __name__ == \"__main__\":\n    ui_test()",
        "detail": "rag_admissions_consulting.src.ui_test.main",
        "documentation": {}
    },
    {
        "label": "app_chat",
        "kind": 2,
        "importPath": "rag_admissions_consulting.src.app_chat",
        "description": "rag_admissions_consulting.src.app_chat",
        "peekOfCode": "def app_chat():\n    question = \"Kỹ sư phát triển sản phẩm Chuỗi khối (Blockchain)?\"\n    lmm = LLms.getLLm(ModelType.GEMINI)\n    # Use GEMINI embeddings for better Vietnamese language support\n    embedding = embeddings.get_embeddings(ModelType.HUGGINGFACE)\n    # Configure store with optimized search parameters\n    store.search_kwargs = {\"k\": 5, \"score_threshold\": 0.7}\n    store.search_type = \"mmr\"\n    retriever = store.getRetriever(embedding)\n    response = RagAgent.answer_question(question, lmm, retriever)",
        "detail": "rag_admissions_consulting.src.app_chat",
        "documentation": {}
    },
    {
        "label": "Embeddings",
        "kind": 6,
        "importPath": "rag_admissions_consulting.src.embeddings",
        "description": "rag_admissions_consulting.src.embeddings",
        "peekOfCode": "class Embeddings:\n    EMBEDDING_MODELS = {\n        ModelType.HUGGINGFACE: lambda: HuggingFaceEmbeddings(\n            model_name=\"sentence-transformers/all-MiniLM-L6-v2\"\n        ),\n        ModelType.GEMINI: lambda: GoogleGenerativeAIEmbeddings(\n            model=\"models/embedding-001\",\n            google_api_key= getEnv(\"GEMINI_API_KEY\"),\n            task_type=\"retrieval_document\"\n        ),",
        "detail": "rag_admissions_consulting.src.embeddings",
        "documentation": {}
    },
    {
        "label": "embeddings",
        "kind": 5,
        "importPath": "rag_admissions_consulting.src.embeddings",
        "description": "rag_admissions_consulting.src.embeddings",
        "peekOfCode": "embeddings = Embeddings()",
        "detail": "rag_admissions_consulting.src.embeddings",
        "documentation": {}
    },
    {
        "label": "LLms",
        "kind": 6,
        "importPath": "rag_admissions_consulting.src.llms",
        "description": "rag_admissions_consulting.src.llms",
        "peekOfCode": "class LLms:\n    def getLLm(type_model: ModelType):\n        if type_model == ModelType.GEMINI:\n            lmm = ChatGoogleGenerativeAI(\n                    model=gemini_model,\n                    treaming=True,\n                    temperature=0,\n                    api_key=getEnv(\"GEMINI_API_KEY\"),\n                )\n            return lmm",
        "detail": "rag_admissions_consulting.src.llms",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "rag_admissions_consulting.src.main",
        "description": "rag_admissions_consulting.src.main",
        "peekOfCode": "def main():\n    print(\"Hello World\")\nif __name__ == \"__main__\":\n    main()",
        "detail": "rag_admissions_consulting.src.main",
        "documentation": {}
    },
    {
        "label": "system_prompt",
        "kind": 5,
        "importPath": "rag_admissions_consulting.src.prompt",
        "description": "rag_admissions_consulting.src.prompt",
        "peekOfCode": "system_prompt = (\"\"\"Bạn là trợ lý tư vấn tuyển sinh chuyên nghiệp của trường Đại học Đông Á, được trang bị kiến thức chuyên sâu về các ngành học và chương trình đào tạo. Nhiệm vụ của bạn là phân tích thông tin từ context một cách kỹ lưỡng và cung cấp câu trả lời chính xác, đầy đủ về tuyển sinh cho học sinh và phụ huynh.\nQuy tắc trả lời:\n1. Thông tin và nội dung:\n   - Chỉ trả lời dựa trên thông tin được cung cấp trong context\n   - Không thêm thông tin giả định hoặc không có trong context\n   - Nếu không có thông tin, trả lời: \"Xin lỗi, hiện tại tôi không có thông tin về vấn đề này\"\n   - Không đề xuất liên hệ hoặc tìm hiểu thêm nếu không có trong context\n2. Cách thức trả lời:\n   - Trả lời ngắn gọn, súc tích, đi thẳng vào trọng tâm câu hỏi\n   - Sử dụng ngôn ngữ thân thiện, dễ hiểu, phù hợp với học sinh",
        "detail": "rag_admissions_consulting.src.prompt",
        "documentation": {}
    },
    {
        "label": "RagAgent",
        "kind": 6,
        "importPath": "rag_admissions_consulting.src.rag_agent",
        "description": "rag_admissions_consulting.src.rag_agent",
        "peekOfCode": "class RagAgent:\n    def rag_chain(llm, retriever):\n        prompt = ChatPromptTemplate.from_messages(\n            [\n                (\"system\", system_prompt),\n                (\"human\", \"{{question}}\"),\n            ]\n        )\n        question_answer_chain = create_stuff_documents_chain(llm, prompt)\n        rag_chain = create_retrieval_chain(retriever, question_answer_chain)",
        "detail": "rag_admissions_consulting.src.rag_agent",
        "documentation": {}
    },
    {
        "label": "WebScraper",
        "kind": 6,
        "importPath": "rag_admissions_consulting.src.scraper",
        "description": "rag_admissions_consulting.src.scraper",
        "peekOfCode": "class WebScraper:\n    def __init__(self, base_url: str, output_dir: str = 'data'):\n        self.base_url = base_url\n        self.output_dir = Path(output_dir)\n        self.output_dir.mkdir(parents=True, exist_ok=True)\n        self.session = requests.Session()\n        self.session.headers.update({\n            'User-Agent': 'RAG Admissions Bot/1.0'\n        })\n        self.robot_parser = RobotFileParser()",
        "detail": "rag_admissions_consulting.src.scraper",
        "documentation": {}
    },
    {
        "label": "seed_data",
        "kind": 2,
        "importPath": "rag_admissions_consulting.src.seed",
        "description": "rag_admissions_consulting.src.seed",
        "peekOfCode": "def seed_data(type: FileDataType = FileDataType.PDF):\n    store.initStore()\n    # load files\n    if type == FileDataType.CSV:\n        extracted_data = helper.load_csv_files(path=\"../data/csv/\")\n    elif type == FileDataType.PDF:\n        extracted_data = helper.load_pdf_files(path=\"../data/pdf/\") \n    elif type == FileDataType.JSON:\n        extracted_data = helper.load_json_files(path=\"../data/json/\")\n    else :",
        "detail": "rag_admissions_consulting.src.seed",
        "documentation": {}
    },
    {
        "label": "Store",
        "kind": 6,
        "importPath": "rag_admissions_consulting.src.store",
        "description": "rag_admissions_consulting.src.store",
        "peekOfCode": "class Store:\n    def __init__(self, index_name: str = \"test\", search_kwargs: str = {\"k\": 3}, search_type: str = \"similarity\"):\n        self.search_kwargs = search_kwargs\n        self.search_type = search_type\n        self.index_name = index_name\n    def initStore(self):\n        pc = Pinecone(api_key=getEnv(\"PINECONE_API_KEY\"))\n        pc.Index(self.index_name)\n    def uploadToStore(self, text_chunks: str, embeddings):\n        docsearch = PineconeVectorStore.from_documents(",
        "detail": "rag_admissions_consulting.src.store",
        "documentation": {}
    },
    {
        "label": "store",
        "kind": 5,
        "importPath": "rag_admissions_consulting.src.store",
        "description": "rag_admissions_consulting.src.store",
        "peekOfCode": "store = Store()",
        "detail": "rag_admissions_consulting.src.store",
        "documentation": {}
    },
    {
        "label": "getEnv",
        "kind": 2,
        "importPath": "rag_admissions_consulting.config",
        "description": "rag_admissions_consulting.config",
        "peekOfCode": "def getEnv(key):\n    if key not in listEnv:\n        raise KeyError(f\"Unknown key: {key}\")\n    value = listEnv[key]\n    if not value:\n        raise ValueError(f\"Environment variable {key} is not set in .env file\")\n    return value",
        "detail": "rag_admissions_consulting.config",
        "documentation": {}
    },
    {
        "label": "listEnv",
        "kind": 5,
        "importPath": "rag_admissions_consulting.config",
        "description": "rag_admissions_consulting.config",
        "peekOfCode": "listEnv = {\n    \"PINECONE_API_KEY\": os.environ.get('PINECONE_API_KEY'),\n    \"GEMINI_API_KEY\": os.environ.get('GEMINI_API_KEY')\n}\ndef getEnv(key):\n    if key not in listEnv:\n        raise KeyError(f\"Unknown key: {key}\")\n    value = listEnv[key]\n    if not value:\n        raise ValueError(f\"Environment variable {key} is not set in .env file\")",
        "detail": "rag_admissions_consulting.config",
        "documentation": {}
    }
]